# Shameless rip from
#
#   https://nedbatchelder.com/blog/200704/my_pdbrc.html
#
# This idea for executing additional content from the working directory is
# interesting.
#
#   https://wiki.python.org/moin/PdbRcIdea

# Print a dict sorted.  %1 is the dict, %2 is the prefix for the names.
alias p_ for k in sorted(%1.keys()): print "%s%-15s= %-80.80s" % ("%2", k, repr(%1[k]))

# Print the instance variables of a thing
alias pi p_ %1.__dict__ %1.

# Print the instance variables of self
alias ps pi self

# Print the locals
alias pl p_ locals() local:

# Next then list and step then list
alias nl n;;l
alias sl s;;l

# Shortcuts for walking up/down the stack
alias uu u;;u
alias uuu u;;u;;u
alias uuuu u;;u;;u;;u
alias dd d;;d
alias ddd d;;d;;d
alias dddd d;;d;;d;;d

# Cast dict-like or list-like objects and then pretty-print them
alias ppd pp dict(%1)
alias ppl pp list(%1)

# Deserialize a JSON string and then pretty-print it
from json import loads
alias ppj pp loads(%1)


# IDK about this... it's something I do frequently, but I"m not sure this is the best way.
# Maybe I should re-consider: https://wiki.python.org/moin/PdbRcIdea
#
# I frequently set a breakpoint and then run some subset of the test suite to enumerate
# the tests that will hit the break point (i.e. exercise the code path) that I am examining.
import os, traceback
alias trace locals()['frame']=[frame for frame in traceback.extract_stack() if os.path.basename(frame[0]).startswith("test_")][0]
alias print_trace print traceback.format_list([locals()["frame"]])[0]


# !!!: This does work, but I need to make this deployable.  This file is
# checked in to my dotfiles, where the file it references is not (yet).
execfile('/Users/sully/.ipython/profile_default/startup/10-utils.py')
