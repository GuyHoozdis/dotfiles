# Shameless rip from
#
#   https://nedbatchelder.com/blog/200704/my_pdbrc.html
#
# This idea for executing additional content from the working directory is
# interesting.
#
#   https://wiki.python.org/moin/PdbRcIdea
#
# Alternatively, see the .macros/ convention that is being used at the end of
# this file.

# Print a dict sorted.  %1 is the dict, %2 is the prefix for the names.
alias p_ for k in sorted(%1.keys()): print("%s%-15s= %-80.80s" % ("%2", k, repr(%1[k])))

# Print the instance variables of a thing
alias pi p_ %1.__dict__ %1.

# Print the instance variables of self
alias ps pi self

# Print the locals
alias pl p_ locals() local:

# Next then list and step then list
alias nl n;;l
alias sl s;;l

# Shortcuts for walking up/down the stack
alias uu u;;u
alias uuu u;;u;;u
alias dd d;;d
alias ddd d;;d;;d

# Cast dict-like, list-like, or object-like instances then pretty-print them
alias ppd pp dict(%1)
alias ppl pp list(%1)
alias ppo pp vars(%1)

# Deserialize a JSON string and then pretty-print it
from json import loads
alias ppj pp loads(%1)



# ================================================================================
#
# Personal utility library.  These are some nicities, liike colorized printing,
# or utilities that encapsulate a series of commands I otherwise run frequently.
# These utilities can be useful to a wide range of projects; in contrast to the
# utilities that I, by convention, write and keep in a folder named .macros/ in
# the project where they are useful.
#

# TODO: Decide what to do about the pyutils package.
# - I used to use the which_test function a lot.  Maybe that would be better as
#   logic in my ipython profile config.
#from pyutils import ppsql, cprint, cformat, inspect_method
#from pyutils.ipython.terminal.utils import which_test
# --------------------------------------------------------------------------------
#
# = Which Test
#
# Set a break point in the code base, run the test suite, and then use this utility
# to determine the test that resulted in this code path being exercised.
#
# ```
# ipdb> which_test()
# test_update_modifier_items_adds_removes_and_updates
# Line: 344
# File: "pos_api/tests/controllers/test_modifiergroup.py"
# ```

# = Colorized print statements
#
# Not required, but helpful if it is readily available.  If you are into print
# debugging, the cprint package offers some useful utility.  You will find a
# method named the same as the package that implements the same interface as
# the print function.
#
# ```
# ipdb> cprint.cprint('{style.bold}{color.red}test{color.stop}', sep=' ', file=sys.stdout)
# test
# ipdb>
# ```
#
# If you need a little more flexibility, you can format the message yourself and
# pass it to to any output stream you like.
#
# ```
# ipdb> kermit = cprint.cformat("{color.green}It's not easy being green{color.stop}")
# ipdb> q_and_a = [cprint.cformat(template, text1, text2) for template, text1, text2 in raw_content]
# ```


# I seem to be typing these commands frequently, so let's see if this will help.
#
# TODO: A convention for making project specific data or logic available to the debugger.
# - Create a .macros/ dir in the root of the project (should be the CWD of the debug shell) and
#   any modules within will be available via the import statement.
# - Does this need to be more robust?
import sys
from os import path
MACROS = './.macros'
sys.path.append(MACROS) if path.isdir(MACROS) else None
del(MACROS, sys, path)
