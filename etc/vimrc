" .vimrc created per Dein installer instructions
"
"   $ curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
"   $ sh ./installer.sh <INSTALL_DIR>
"
" I used ./vim/bundles for the INSTALL_DIR, because that is what I had been
" using with NeoBundle.  It could have been any number of directories though.
"
" ==== Inspiration =====
" The vimrc in this repo looks like it is a good resource.  Check out the
" syntax highlighting plugin.
"
" - https://github.com/ets-labs/python-vimrc
"
" ----------------------------------------------------------------------
" A "Learn X the Hardway" e-book!!!  I've only just scanned over it, but
" it looks packed full of great topics with good samples.
"
" - http://learnvimscriptthehardway.stevelosh.com/chapters/48.html
"
" ----------------------------------------------------------------------
" I don't recall what this is all about.  I need to follow up on this.
"
" - https://github.com/spf13/spf13-vim#a-highly-optimized-vimrc-config-file
"
" ----------------------------------------------------------------------
" I'll have double check, but unless tyat is the, I think it was called
" "pymode", plugin that I very recenly have been using, then that is still
" the shit... no, just shit.
"
" ~~~I've tried these plugins in the past, but didn't feel like it was worth
" ~~~it.  It's been a few years since I've reviewed them, so I'm going to give
" ~~~them another review.
"
"   http://200ok.ch/posts/vim-as-python-ide.html
"
" ----------------------------------------------------------------------
"  Dein startup and VI/VIM plugin management
" ----------------------------------------------------------------------
if &compatible
  set nocompatible	" Be iMproved
endif


" Required: Put Dein on the runtimepath
set runtimepath+=~/.vim/bundles/repos/github.com/Shougo/dein.vim


" Required: Dein startup and plugin activation logic
if dein#load_state('~/.vim/bundles')
  call dein#begin('~/.vim/bundles')

  " Required: Let dein manage dein
  call dein#add('~/.vim/bundles/repos/github.com/Shougo/dein.vim')

  " Add/Remove your plugins here
  " -------------------------------
  " Some examples:
  "  * call dein#add('Shougo/neosnippet.vim')
  "  * call dein#add('Shougo/neosnippet-snippets')
  "  * call dein#add('Shougo/vimshell', { 'rev': '3787e5' })
  " ---------------------------------------------------------

  call dein#add('scrooloose/nerdtree')      " NerdTree - filesystem explorer
  call dein#add('tpope/vim-fugitive')       " Fugitive - git wrapper
  call dein#add('tpope/vim-surround')       " Another tpope miracle
  call dein#add('tpope/vim-commentary')     " Another tpope miracle
  call dein#add('stephpy/vim-yaml')         " YAML Syntax
  call dein#add('vim-airline/vim-airline')  " Status/tabline enhancement
  call dein#add('vim-airline/vim-airline-themes')
  call dein#add('ctrlpvim/ctrlp.vim')       " Ctrl-P - File/Directory search
  call dein#add('editorconfig/editorconfig-vim')
  call dein#add('fholgado/minibufexpl.vim')   " Mini Buffer Explorer
  call dein#add('python-mode/python-mode')    " Python Mode
  call dein#add('~/Development/guyhoozdis/vim-n1ql')
  " This required a bit of setup, more than I would normally tolerate, but it is useful and I do use it.
  "   https://github.com/JamshedVesuna/vim-markdown-preview
  call dein#add('JamshedVesuna/vim-markdown-preview')

  " Experimental - Things I am giving a chance, but might not keep
  call dein#add('alfredodeza/pytest.vim')
  call dein#add('vim-scripts/Conque-Shell')
  call dein#add('tpope/vim-repeat')         " Another tpope miracle
  call dein#add('tpope/vim-speeddating')    " Another tpope miracle
  call dein#add('altercation/vim-colors-solarized')

  " -----------------------------------------------------------------------------
  " I want to introduce these too, but I don't want to do too many at once, so
  " these are a reminder to pull them in later.
  "
  "   https://github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt
  "   https://github.com/svermeulen/vim-easyclip
  " -----------------------------------------------------------------------------

  "call dein#add('jeffkreeftmeijer/vim-dims')

  " -------------------------------
  " End "Add/Remove your plugins"
  " -------------------------------
  " Required: End Dein startup and plugin activation logic
  call dein#end()
  call dein#save_state()
endif


" Required
filetype plugin indent on
syntax enable


" Automatically install plugins on startup
if dein#check_install()
  call dein#install()
endif


" ----------------------------------------------------------------------
"
" Global VI/VIM configuration
"
" ----------------------------------------------------------------------

"
" Make VIM silent
"
    set noerrorbells visualbell t_vb=

"
" Redefine the map leader
"
    let mapleader=','

"
" Airline customization
"
" Here are a few themes that look decent on my current setup
"
"     https://github.com/vim-airline/vim-airline/wiki/Screenshots#full-list-without-powerline-font-unfortunately
"
" I ended up installing the pre-patched fonts from powerline.  I had to go
" into the iTerm preferences and select one of the _<blah> Powerline_ fonts.
"
" Per the article below I have been using "Inconsolata for Powerline" font, at
" 14pt, and it has been working pretty well.  The article is a good reference
" for the commands I ran to install the patched Powerline fonts (so  Airline
" could use them), but I didn't actually do anything else described by that
" article.
"
"     https://coderwall.com/p/yiot4q/setup-vim-powerline-and-iterm2-on-mac-os-x
"
" I'm still trying to find the theme that works best for me.  These are a few
" of the ones that, at a glace, look decent.
"
"  * angr
"  * lucius
"  * molokai
"  * murmur
"  * papercolor
"  X serene - (statusline is same color as document, no contrast)
"  * understated
"
    set laststatus=2
    let g:airline_theme = 'murmur'
    let g:airline_powerline_fonts = 1

"
" Format/Prettify
"
    nmap =j :%!python -m json.tool<CR>
    nmap =x :%!xmllint --format --recover --encode UTF-8 -<CR>

"
" Assume these values for filetypes not explicitly defined in
" the ~/.vim/after/ftplugin directory
"
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set expandtab
    set nowrap
    set relativenumber
    set number

"
" ## Colorschemes:
"
" These seem to work well for me for code and text files.  The
" folds are easy to see in these.
" -------------
"  * zellner
"  * ron
"  * delek
"  * torte
"
" Highcontrast good for diff views
" -------------
"  * blue
"
"
"  * murphy
"  * pablo
"  * peachpuff
"  * slate <-- I've enjoyed this one, but Folds are hard to see.
"  * zellner <-- I've enjoyed this one two
"  * delek <-- I've enjoyed this one two
"
" I seem to rotate between slate, zellner, and delek the most.
"
    "colorscheme zellner
    colorscheme delek

    if &diff
      " http://blog.binchen.org/posts/use-vimdiff-to-resolve-git-merge-conflicts-effectively.html
      " https://gist.github.com/mattratleph/4026987
      "  - See the comment that discusses setting cursorline and some of the
      "  highlight colors
      colorscheme slate
      set laststatus=2
      set statusline+=%-10.3n
      map <silent> <leader>1 :diffget 1<CR> :diffupdate<CR>
      map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
      map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
    endif


" ----------------------------------------------------------------------
"
" Markdown Preview
"
" Notes:
" - Grip: Render local readme files before sending off to GitHub
"   - https://github.com/joeyespo/grip
"   - Readme Driven Development: http://tom.preston-werner.com/2010/08/23/readme-driven-development.html
"   - This was installed via Homebrew.
" - GitHub may rate limit or block if too much activity.  Configuring a token
"   can increase the API daily quota.
"   - https://github.com/joeyespo/grip#access
"   - This has not been done yet.

let vim_markdown_preview_browser='Google Chrome'
let vim_markdown_preview_github=1
let vim_markdown_preview_hotkey='<C-m>'


" ----------------------------------------------------------------------
"
" VIM IDE Configuration
"
"   http://200ok.ch/posts/vim-as-python-ide.html
"
" Notes:
" - The global configuration flags, form MiniBufExpl, cited by the article are
"   all obsolete.  The only thing that needs to be added is a key mapping.
" - If you like the TagList + CTags functionality, then you should add the
"   installation command `brew install ctags-exuberant` to the proper script.
" - To prevent rendering corruption, in the tag list window, after a tag is
"   selected the `TList_Inc_Winwidth` option is set to zero.
" - TagList is taking a lot of configuration to start working like I expect. I
"   think it is in a basic usable state right now, but you probably still need
"   to go over the "Commands" section of the documentation and possibly tweak
"   a few more of the plugin settings.
" - The article describes using VIM's `omnifunc` to gain code completion. That
"   has never worked very well for me.  I'm going to give `jedi-vim` a try
"   again.
"
" Update:
" - I've come to enjoy Mini Buff Explorer.
" - I don't use TagList.  I'm removing any related config for it.
" - I discovered `pymode` recently and have been very happy with the
"   functionality and features it offers, but it might be a dying
"   project.
" ----------------------------------------------------------------------

"
" Mini Buff Explorer
"
    " Open/close MB and adjust ordering of elements
    map <Leader>mbo :MBEToggle<CR>
    map <Leader>mbl :MBEToggleMRU<CR>
    " Move to the next/previous normal buffer
    map <Leader>mbn :MBEbn<CR>
    map <Leader>mbp :MBEbp<CR>
    " Move forward/backward in the MRU buffer list
    map <Leader>mbf :MBEbf<CR>
    map <Leader>mbb :MBEbb<CR>


"
" Custom NERDTree Configuration
"
    nmap <Leader>nt :NERDTreeToggle<CR>
    let NERDTreeIgnore = ['\.pyc$']

"
" Fugitive customization
"
    nmap <Leader>gs :Gstatus<CR>
    nmap <Leader>gd :Gdiff<CR>
    nmap <Leader>gb :Gblame<CR>
    nmap <Leader>gl :Glog<CR>
    "nmap <Leader>gc :Gcommit<CR>
    "nmap <Leader>gp :Gpush<CR>

"
" PyMode VIM
"
" Documentation:
" - ":help pymode help"
" - https://github.com/vim-scripts/Python-mode-klen/blob/master/doc/pymode.txt
"
" Troubleshooting:
" - ":call pymode#troubleshooting#test()"
"
" RopeVIM
" - https://github.com/python-rope/ropevim#variables
" - This is documentation to the original. PymodeVIM is similar, but does not
"   expose exactly the same thing variables.
"
    let g:pymode_breakpoint_cmd = 'import ipdb; ipdb.sset_trace()  # XXX Breakpoint'
    let g:pymode_lint_on_write = 0
    let g:pymode_doc = 0
    let g:pymode_rope_complete_on_dot = 0
    let g:pymode_rope_goto_definition_cmd = 'e'
    let g:pymode_syntax_print_as_function = 1

    nmap <Leader>pl :PymodeLintToggle<CR>
    nmap <Leader>ll :PymodeLint<CR>
    nmap <Leader>pmd :call pymode#troubleshooting#test()<CR>


"
" EditorConfig Customization
"
" Per the project's README, these changes are recommended.
"
    let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
